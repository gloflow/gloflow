kind: pipeline
type: docker
name: gloflow

workspace:
  # IMPORTANT!! - this is where Drone will clone the gloflow repo, and where the gf_builder
  #               container is placing all its code.
  base: /home/gf

# services:
#   - name: mongo
#     image: mongo
#
#   - name: elasticsearch
#     image: elasticsearch:5-alpine
#     ports:
#       - 9200

volumes:
  - name: docker-sock
    host:
      path: /var/run/docker.sock

steps:

  #-------------------------------
  # # TEST_ELASTICSEARCH
  #
  # - name: test-elasticsearch
  #   image: alpine:3.8
  #   commands:
  #     - apk add curl
  #     # wait for ES to bootup
  #     - sleep 45 
  #     - curl http://elasticsearch:9200

  #-------------------------------
  # BUILD_RUST - Rust libs need to be built first, for the test pipeline stage
  #              to work and be able to properly load Rust compiled GF libs.
  - name: build_rust
    image: glofloworg/gf_builder
    commands:
      # "-u" - run unbuffered to see all stdout/stderr as it happens
      - python -u /home/gf/build/gf_builder/gf_builder.py -run=build_rust
    when:
      event:
        - push
      branch:
        - master

  #-------------------------------
  # TEST
  - name: test
    image: glofloworg/gf_builder

    # IMPORTANT!! - gf_builder.py starts up several test service containers (mongo/elasticsearch/etc.),
    #               and those containers are run with host networking.
    #               starting this stage container with host networking as well, so that the tests can connect
    #               to testing services and share address space.
    network_mode: host
    environment:
    
      # TESTING_SERVICES
      GF_MONGODB_HOST: localhost # mongo
      GF_ELASTICSEARCH_HOST: localhost:9200 # elasticsearch:9200

      GF_AWS_ACCESS_KEY_ID:
        from_secret: gf_testing__aws_access_key_id
      GF_AWS_SECRET_ACCESS_KEY:
        from_secret: gf_testing__aws_secret_access_key

    # IMPORTANT!! - needed for Docker client running in gf_builder container to be able to 
    #               connect to the Docker daemon running on the host machine. this connection
    #               is whats used for running test_service containers.
    volumes:
      - name: docker-sock
        path: /var/run/docker.sock

    commands:
      # "-u" - run unbuffered to see all stdout/stderr as it happens
      - python -u /home/gf/build/gf_builder/gf_builder.py -run=test -test_services
    when:
      event:
        - push
      branch:
        - master

  #-------------------------------
  # BUILD_GO
  - name: build_go
    image: glofloworg/gf_builder
    commands:
      # "-u" - run unbuffered to see all stdout/stderr as it happens
      - python -u /home/gf/build/gf_builder/gf_builder.py -run=build
    when:
      event:
        - push
      branch:
        - master

  #-------------------------------
  # BUILD_CONTAINERS
  - name: build_containers
    image: glofloworg/gf_builder

    environment:
      GF_DOCKERHUB_USER:
        from_secret: gf_os__dockerhub_user # used to build the container for a particular user

    # IMPORTANT!! - needed for Docker client running in gf_builder container to be able to 
    #               connect to the Docker daemon running on the host machine. this connection
    #               is whats used for container building.
    volumes:
      - name: docker-sock
        path: /var/run/docker.sock
    commands:
      # "-u" - run unbuffered to see all stdout/stderr as it happens
      - python -u /home/gf/build/gf_builder/gf_builder.py -run=build_containers
    when:
      event:
        - push
      branch:
        - master

  #-------------------------------
  # PUBLISH_CONTAINERS
  - name: publish_containers
    image: glofloworg/gf_builder
    environment:
      GF_DOCKERHUB_USER:
        from_secret: gf_os__dockerhub_user
      GF_DOCKERHUB_P:
        from_secret: gf_os__dockerhub_p

    # IMPORTANT!! - needed for Docker client running in gf_builder container to be able to 
    #               connect to the Docker daemon running on the host machine. this connection
    #               is whats used for container  publishing.
    volumes:
      - name: docker-sock
        path: /var/run/docker.sock
    commands:
      # "-u" - run unbuffered to see all stdout/stderr as it happens
      - python -u /home/gf/build/gf_builder/gf_builder.py -run=publish_containers
    when:
      event:
        - push
      branch:
        - master

  #-------------------------------
  # NOTIFY_COMPLETION
  - name: notify_completion
    image: glofloworg/gf_builder
    environment:
      GF_NOTIFY_COMPLETION_URL:
        from_secret: gf_os__notify_completion_url
    commands:
      # "-u" - run unbuffered to see all stdout/stderr as it happens
      - python -u /home/gf/build/gf_builder/gf_builder.py -run=notify_completion
    when:
      event:
        - push
      branch:
        - master

  #-------------------------------