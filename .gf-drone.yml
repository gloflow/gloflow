kind: pipeline
type: docker
name: gloflow

workspace:
  # IMPORTANT!! - this is where Drone will clone the gloflow repo, and where the gf_builder
  #               container is placing all its code.
  base: /home/gf

# services:
#   - name: mongo
#     image: mongo
#
#   - name: elasticsearch
#     image: elasticsearch:5-alpine
#     ports:
#       - 9200

volumes:
  - name: docker-sock
    host:
      path: /var/run/docker.sock

  # RUST_BUILD_CACHE
  - name: rust_build_cache__gf_core
    host:
      path: /home/gf/rust_build_cache/gf_core

  # RUST_BUILD_CACHE
  - name: rust_build_cache__gf_images_jobs
    host: 
      path: /home/gf/rust_build_cache/gf_images_jobs

  # RUST_BUILD_CACHE
  - name: rust_build_cache__gf_images_jobs_py
    host: 
      path: /home/gf/rust_build_cache/gf_images_jobs_py

  # RUST_BUILD_CACHE
  - name: rust_build_cache__gf_ml
    host:
      path: /home/gf/rust_build_cache/gf_ml

steps:

  #-------------------------------
  # # TEST_ELASTICSEARCH
  #
  # - name: test-elasticsearch
  #   image: alpine:3.8
  #   commands:
  #     - apk add curl
  #     # wait for ES to bootup
  #     - sleep 45 
  #     - curl http://elasticsearch:9200

  #-------------------------------
  # BUILD_RUST - Rust libs need to be built first, for the test pipeline stage
  #              to work and be able to properly load Rust compiled GF libs.
  - name: build_rust
    image: glofloworg/gf_builder_rust_ubuntu:latest # glofloworg/gf_builder:latest

    volumes:
      - name: rust_build_cache__gf_core
        path: /home/gf/rust/gf_core/target

      - name: rust_build_cache__gf_images_jobs
        path: /home/gf/rust/gf_images_jobs/target

      - name: rust_build_cache__gf_images_jobs_py
        path: /home/gf/rust/gf_images_jobs_py/target
        
      - name: rust_build_cache__gf_ml
        path: /home/gf/rust/gf_ml/target

    commands:
      # "-u" - run unbuffered to see all stdout/stderr as it happens
      # - python3 -u /home/gf/build/gf_builder/gf_builder.py -run=build_rust
      - python3 -u /home/gf/ops/cli__build.py -run=build_rust -app=gf_images_jobs -build_outof_cont
    when:
      event:
        - push
      branch:
        - master

  #-------------------------------
  # BUILD_GO
  - name: build_go
    image: glofloworg/gf_builder_go_ubuntu:latest # glofloworg/gf_builder:latest
    commands:

      - sed 's/GF_COMMIT_SHA/${DRONE_COMMIT}/g' /home/gf/go/gf_core/gf_sys_release_info.go
      - sed 's/GF_COMMIT_SHA/${DRONE_COMMIT}/g' /home/gf/go/gf_core/gf_sys_release_info.go > /home/gf/go/gf_core/gf_sys_release_info.go
      - cat /home/gf/go/gf_core/gf_sys_release_info.go 

      # "-u" - run unbuffered to see all stdout/stderr as it happens
      # "-build_outof_cont" - dont build in a container, since this build stage already runs in a container.
      #                       by default all builds done with cli__build.py are run in a container.
      # - python3 -u /home/gf/build/gf_builder/gf_builder.py -run=build_go
      - python3 -u /home/gf/ops/cli__build.py -run=build_go -fetch_deps -build_outof_cont -app=gf_solo
      
    when:
      event:
        - push
      branch:
        - master
  
  #-------------------------------
  # # TEST
  # - name: test
  #   image: glofloworg/gf_builder:latest
  #
  #   # IMPORTANT!! - gf_builder.py starts up several test service containers (mongo/elasticsearch/etc.),
  #   #               and those containers are run with host networking.
  #   #               starting this stage container with host networking as well, so that the tests can connect
  #   #               to testing services and share address space.
  #   network_mode: host
  #   environment:
  #
  #     # TESTING_SERVICES
  #     GF_MONGODB_HOST: localhost # mongo
  #     GF_ELASTICSEARCH_HOST: localhost:9200 # elasticsearch:9200
  #
  #     GF_AWS_ACCESS_KEY_ID:
  #       from_secret: gf_testing__aws_access_key_id
  #     GF_AWS_SECRET_ACCESS_KEY:
  #       from_secret: gf_testing__aws_secret_access_key
  #
  #   # IMPORTANT!! - needed for Docker client running in gf_builder container to be able to 
  #   #               connect to the Docker daemon running on the host machine. this connection
  #   #               is whats used for running test_service containers.
  #   volumes:
  #     - name: docker-sock
  #       path: /var/run/docker.sock
  #
  #   commands:
  #     # "-u" - run unbuffered to see all stdout/stderr as it happens
  #     - python3 -u /home/gf/build/gf_builder/gf_builder.py -run=test -test_services
  #   when:
  #     event:
  #       - push
  #     branch:
  #       - master

  #-------------------------------
  # BUILD_WEB
  - name: build_web
    image: glofloworg/gf_builder_web:latest
    commands:
      # "-u" - run unbuffered to see all stdout/stderr as it happens
      # - python3 -u /home/gf/build/gf_builder/gf_builder.py -run=build_web
      - python3 -u /home/gf/ops/cli__build.py -run=build_web -build_outof_cont -app=gf_solo
    when:
      event:
        - push
      branch:
        - master

  #-------------------------------
  # BUILD_CONTAINERS
  - name: build_containers
    image: glofloworg/gf_builder_go_ubuntu:latest # glofloworg/gf_builder:latest

    environment:
      GF_DOCKERHUB_USER:
        from_secret: gf_os__dockerhub_user # used to build the container for a particular user

    # IMPORTANT!! - needed for Docker client running in gf_builder container to be able to 
    #               connect to the Docker daemon running on the host machine. this connection
    #               is whats used for container building.
    volumes:
      - name: docker-sock
        path: /var/run/docker.sock
    commands:


      # HACK!! - using gf_builder_go_ubuntu which doesnt have docker installed,
      #          so doing it manually here. use a proper container image with docker.
      - apt-get update
      - apt-get install -y docker.io

      # "-u" - run unbuffered to see all stdout/stderr as it happens
      # - python3 -u /home/gf/build/gf_builder/gf_builder.py -run=build_containers -app=gf_solo
      - python3 -u /home/gf/ops/cli__build.py -run=build_containers -app=gf_solo

    when:
      event:
        - push
      branch:
        - master

  #-------------------------------
  # PUBLISH_CONTAINERS
  - name: publish_containers
    image: glofloworg/gf_builder_go_ubuntu:latest # glofloworg/gf_builder:latest
    environment:
      GF_DOCKERHUB_USER:
        from_secret: gf_os__dockerhub_user
      GF_DOCKERHUB_P:
        from_secret: gf_os__dockerhub_p

    # IMPORTANT!! - needed for Docker client running in gf_builder container to be able to 
    #               connect to the Docker daemon running on the host machine. this connection
    #               is whats used for container publishing.
    volumes:
      - name: docker-sock
        path: /var/run/docker.sock
    commands:

      # HACK!! - using gf_builder_go_ubuntu which doesnt have docker installed,
      #          so doing it manually here. use a proper container image with docker.
      - apt-get update
      - apt-get install -y docker.io
      
      # "-u" - run unbuffered to see all stdout/stderr as it happens
      # - python3 -u /home/gf/build/gf_builder/gf_builder.py -run=publish_containers -app=gf_solo
      - python3 -u /home/gf/ops/cli__build.py -run=publish_containers -app=gf_solo

    when:
      event:
        - push
      branch:
        - master

  #-------------------------------
  # NOTIFY_COMPLETION
  - name: notify_completion
    image: glofloworg/gf_builder:latest
    environment:
      GF_NOTIFY_COMPLETION_URL:
        from_secret: gf_os__notify_completion_url
    commands:
      # "-u" - run unbuffered to see all stdout/stderr as it happens
      - python3 -u /home/gf/build/gf_builder/gf_builder.py -run=notify_completion
    when:
      event:
        - push
      branch:
        - master

  #-------------------------------