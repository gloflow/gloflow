kind: pipeline
type: docker
name: gloflow

workspace:
  #IMPORTANT!! - this is where Drone will clone the gloflow repo, and where the gf_builder
  #              container is placing all its code.
  base: /home/gf


services:
  - name: mongo
    image: mongo

  - name: elasticsearch
    image: elasticsearch:7.4.0


steps:

  #-------------------------------
  # TEST
  - name: test
    image: glofloworg/gf_builder
    environment:
      GF_MONGODB_HOST: mongo
      GF_ELASTICSEARCH_HOST: elasticsearch
      GF_AWS_ACCESS_KEY_ID:
        from_secret: gf_testing__aws_access_key_id
      GF_AWS_SECRET_ACCESS_KEY:
        from_secret: gf_testing__aws_secret_access_key
    commands:
      # "-u" - run unbuffered to see all stdout/stderr as it happens
      - python -u /home/gf/build/gf_builder/gf_builder.py -run=test
    when:
      event:
        - push
      branch:
        - master

  #-------------------------------
  # BUILD
  - name: build
    image: glofloworg/gf_builder
    commands:
      # "-u" - run unbuffered to see all stdout/stderr as it happens
      - python -u /home/gf/build/gf_builder/gf_builder.py -run=build
    when:
      event:
        - push
      branch:
        - master

  #-------------------------------
  # BUILD_CONTAINERS
  - name: build_containers
    image: glofloworg/gf_builder

    # IMPORTANT!! - needed for Docker client running in gf_builder container to be able to 
    #               connect to the Docker daemon running on the host machine. this connection
    #               is whats used for container building and later publishing.
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    commands:
      # "-u" - run unbuffered to see all stdout/stderr as it happens
      - python -u /home/gf/build/gf_builder/gf_builder.py -run=build_containers
    when:
      event:
        - push
      branch:
        - master

  #-------------------------------